{"ast":null,"code":"var _jsxFileName = \"/Users/denalichin/Desktop/GITHUB/yt-tracker/client/src/components/Login.js\",\n  _s = $RefreshSig$();\n/*global google*/\nimport { useEffect, useState, useContext } from 'react';\nimport { jwtDecode } from \"jwt-decode\";\nimport { LoginContext } from '../contexts/LoginContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n  // const google = window.google;\n\n  const {\n    user,\n    setUser\n  } = useContext(LoginContext); //declared in App.js. Here we extract it using Context.api\n\n  function handleCallbackResponse(response) {\n    console.log(\"Signin Success, Encoded JWT ID token: \" + response.credential);\n    var userObject = jwtDecode(response.credential);\n    console.log(\"User Object: \");\n    console.log(userObject);\n    setUser(userObject);\n    document.getElementById(\"signInDiv\").hidden = true;\n  }\n  function handleSignOut(event) {\n    setUser({}); //set user to empty object, effectively signing out\n    document.getElementById(\"signInDiv\").hidden = false;\n  }\n\n  //*** These 2 Entire UseEffect is to test Alt way of initializing gsi script\n  const [loaded, setLoaded] = useState(false); //tell if google script is loaded\n  useEffect(() => {\n    const scriptTag = document.createElement('script');\n    scriptTag.src = 'https://accounts.google.com/gsi/client';\n    scriptTag.addEventListener('load', setLoaded(true));\n    document.body.appendChild(scriptTag);\n  }, []);\n  useEffect(() => {\n    if (!loaded) return;\n    console.log('google alt script LOADED');\n    google.accounts.id.initialize({\n      client_id: \"226902442258-hbu4p3v9q6gkhtnkpdbj8522uo4fr1l1.apps.googleusercontent.com\",\n      callback: handleCallbackResponse\n    });\n    google.accounts.id.renderButton(document.getElementById(\"signInDiv\"), {\n      theme: \"outline\",\n      size: \"large\"\n    });\n  });\n\n  // useEffect(()=> {\n\n  //     console.log(\"useEffect running...\");\n  //     /* global google */ \n\n  //     //google not defined can be fixed by removing async and defer in index.html\n  //     google.accounts.id.initialize({\n  //     client_id: \"226902442258-hbu4p3v9q6gkhtnkpdbj8522uo4fr1l1.apps.googleusercontent.com\",\n  //     callback: handleCallbackResponse\n  //     });\n\n  //     google.accounts.id.renderButton(\n  //     document.getElementById(\"signInDiv\"),\n  //     { theme: \"outline\", size: \"large\"}\n  //     );\n\n  // }, []); //if anything in array is modified, it reloads the page\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"signInDiv\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(Login, \"H2YMzDD2UDP7qBoykF0jzqT0JWU=\");\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useEffect","useState","useContext","jwtDecode","LoginContext","jsxDEV","_jsxDEV","Login","_s","user","setUser","handleCallbackResponse","response","console","log","credential","userObject","document","getElementById","hidden","handleSignOut","event","loaded","setLoaded","scriptTag","createElement","src","addEventListener","body","appendChild","google","accounts","id","initialize","client_id","callback","renderButton","theme","size","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/denalichin/Desktop/GITHUB/yt-tracker/client/src/components/Login.js"],"sourcesContent":["/*global google*/ \nimport { useEffect, useState, useContext} from 'react';\nimport { jwtDecode } from \"jwt-decode\";\nimport { LoginContext } from '../contexts/LoginContext';\n\nexport default function Login() {\n\n    // const google = window.google;\n\n    const {user, setUser} = useContext(LoginContext) //declared in App.js. Here we extract it using Context.api\n\n    function handleCallbackResponse(response){\n        console.log(\"Signin Success, Encoded JWT ID token: \" + response.credential);\n        var userObject = jwtDecode(response.credential);\n        console.log(\"User Object: \");\n        console.log(userObject);\n\n        setUser(userObject);\n\n        document.getElementById(\"signInDiv\").hidden = true;\n    }\n\n    function handleSignOut(event){\n        setUser({}); //set user to empty object, effectively signing out\n        document.getElementById(\"signInDiv\").hidden = false;\n    }\n\n\n    //*** These 2 Entire UseEffect is to test Alt way of initializing gsi script\n    const [loaded,setLoaded] = useState(false); //tell if google script is loaded\n    useEffect(() => {\n        const scriptTag = document.createElement('script');\n        scriptTag.src = 'https://accounts.google.com/gsi/client';\n        scriptTag.addEventListener('load', setLoaded(true));\n        document.body.appendChild(scriptTag);\n    }, []);\n\n    useEffect(()=>{\n        if(!loaded) return;\n        console.log('google alt script LOADED');\n\n        google.accounts.id.initialize({\n            client_id: \"226902442258-hbu4p3v9q6gkhtnkpdbj8522uo4fr1l1.apps.googleusercontent.com\",\n            callback: handleCallbackResponse\n            });\n    \n            google.accounts.id.renderButton(\n            document.getElementById(\"signInDiv\"),\n            { theme: \"outline\", size: \"large\"}\n            );\n    });\n\n\n    // useEffect(()=> {\n        \n    //     console.log(\"useEffect running...\");\n    //     /* global google */ \n\n    //     //google not defined can be fixed by removing async and defer in index.html\n    //     google.accounts.id.initialize({\n    //     client_id: \"226902442258-hbu4p3v9q6gkhtnkpdbj8522uo4fr1l1.apps.googleusercontent.com\",\n    //     callback: handleCallbackResponse\n    //     });\n\n    //     google.accounts.id.renderButton(\n    //     document.getElementById(\"signInDiv\"),\n    //     { theme: \"outline\", size: \"large\"}\n    //     );\n\n    // }, []); //if anything in array is modified, it reloads the page\n\n    return (\n        <div>\n            <div id=\"signInDiv\"></div>\n        </div>\n    )\n}"],"mappings":";;AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAO,OAAO;AACtD,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,YAAY,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAE5B;;EAEA,MAAM;IAACC,IAAI;IAAEC;EAAO,CAAC,GAAGR,UAAU,CAACE,YAAY,CAAC,EAAC;;EAEjD,SAASO,sBAAsBA,CAACC,QAAQ,EAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAGF,QAAQ,CAACG,UAAU,CAAC;IAC3E,IAAIC,UAAU,GAAGb,SAAS,CAACS,QAAQ,CAACG,UAAU,CAAC;IAC/CF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5BD,OAAO,CAACC,GAAG,CAACE,UAAU,CAAC;IAEvBN,OAAO,CAACM,UAAU,CAAC;IAEnBC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,MAAM,GAAG,IAAI;EACtD;EAEA,SAASC,aAAaA,CAACC,KAAK,EAAC;IACzBX,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACbO,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,MAAM,GAAG,KAAK;EACvD;;EAGA;EACA,MAAM,CAACG,MAAM,EAACC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5CD,SAAS,CAAC,MAAM;IACZ,MAAMwB,SAAS,GAAGP,QAAQ,CAACQ,aAAa,CAAC,QAAQ,CAAC;IAClDD,SAAS,CAACE,GAAG,GAAG,wCAAwC;IACxDF,SAAS,CAACG,gBAAgB,CAAC,MAAM,EAAEJ,SAAS,CAAC,IAAI,CAAC,CAAC;IACnDN,QAAQ,CAACW,IAAI,CAACC,WAAW,CAACL,SAAS,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAENxB,SAAS,CAAC,MAAI;IACV,IAAG,CAACsB,MAAM,EAAE;IACZT,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAEvCgB,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;MAC1BC,SAAS,EAAE,0EAA0E;MACrFC,QAAQ,EAAExB;IACV,CAAC,CAAC;IAEFmB,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACI,YAAY,CAC/BnB,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,EACpC;MAAEmB,KAAK,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAO,CACjC,CAAC;EACT,CAAC,CAAC;;EAGF;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA,oBACIhC,OAAA;IAAAiC,QAAA,eACIjC,OAAA;MAAK0B,EAAE,EAAC;IAAW;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEd;AAACnC,EAAA,CAvEuBD,KAAK;AAAAqC,EAAA,GAALrC,KAAK;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}